// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id       Int       @id @unique @default(autoincrement())
  title    String    @unique @db.VarChar(50)
  slug     String    @unique @db.VarChar(50)
  imageUrl String    @db.VarChar(255)
  product  Product[]
}

model Product {
  id          Int       @id @unique @default(autoincrement())
  title       String    @unique @db.VarChar(50)
  slug        String    @unique @db.VarChar(50)
  description String    @db.Text
  imageUrl    String    @db.VarChar(255)
  price       Decimal   @db.Decimal(9, 2)
  Category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  Int?
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String    @id @default(cuid())
  firstName      String?    @db.VarChar(100)
  lastName       String?    @db.VarChar(100)
  email          String?   @unique @db.VarChar(255)
  hashedPassword String?   @unique @db.VarChar(255)
  emailVerified  DateTime? @map("email_verified")
  image          String?
  role           Role?      @default(USER)
  accounts       Account[]
  sessions       Session[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
